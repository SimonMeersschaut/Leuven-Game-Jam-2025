name: PR Windows Build

# Use pull_request_target so the workflow runs in the context of the base repository
# (has permissions and access to secrets). We explicitly check out the PR head
# commit from the source repository to avoid executing workflow code from the
# forked repository.
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  issues: write

jobs:
  build-pr-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout PR head (safe)
      uses: actions/checkout@v4
      with:
        # Check out the exact branch/commit from the PR's head repository
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build Windows executable with PyInstaller
      run: |
        pyinstaller --clean --noconfirm compile.spec

    - name: Copy resources into distribution (Windows)
      if: always()
      run: |
        REM Ensure dist folder exists and copy resources
        if exist dist\KULGameJam ( rmdir /s /q dist\KULGameJam )
        mkdir dist\KULGameJam
        xcopy /E /I /Y resources dist\KULGameJam\resources || echo No resources to copy

    - name: Zip Windows distribution
      run: |
        powershell -Command "Compress-Archive -Path 'dist\KULGameJam\*' -DestinationPath 'KULGameJam-windows-pr.zip' -Force"

    - name: Upload ZIP artifact for pull requests
      uses: actions/upload-artifact@v4
      with:
        name: KULGameJam-windows-build-${{ github.run_number }}
        path: KULGameJam-windows-pr.zip

    - name: Post PR comment with release link (if release exists)
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO: ${{ github.repository }}
        BRANCH: ${{ github.event.pull_request.head.ref }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        echo Looking up latest release for branch "$BRANCH"
        api_url="https://api.github.com/repos/$REPO/releases"
        release_url=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$api_url" | jq -r ".[] | select(.tag_name | startswith(\"$BRANCH-\")) | .html_url" | head -n 1)
        if [ -n "$release_url" ]; then
          echo "Found release: $release_url"
          comment_body=$(jq -nc --arg url "$release_url" '{body: ("Windows build available: " + $url)}')
          curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d "$comment_body" "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments" >/dev/null
        else
          echo "No release found for branch $BRANCH"
        fi
