name: Build and Release

permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - "main"

jobs:
  windows-pr-build:
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Windows executable with PyInstaller
      run: |
        pyinstaller --clean --noconfirm compile.spec

    - name: Copy resources into distribution (Windows)
      if: always()
      run: |
        xcopy /E /I /Y resources dist\KULGameJam\resources || echo No resources to copy

    - name: Zip Windows distribution
      run: |
        powershell -Command "Compress-Archive -Path 'dist\KULGameJam' -DestinationPath 'KULGameJam-windows-pr.zip' -Force"

    - name: Upload ZIP artifact for pull requests
      uses: actions/upload-artifact@v4
      with:
        name: KULGameJam-windows-build-${{ github.run_number }}
        path: KULGameJam-windows-pr.zip

  create-release:
    needs: windows-pr-build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/heads/') && github.event_name == 'push'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Read version
      id: version
      run: |
        $ver = Get-Content -Path VERSION.txt -ErrorAction Stop | Select-Object -First 1
        echo "::set-output name=tag::v$ver"

    - name: Create tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
        git push origin "${{ steps.version.outputs.tag }}"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: ${{ steps.version.outputs.tag }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./KULGameJam-windows-pr.zip
        asset_name: KULGameJam-windows-${{ steps.version.outputs.tag }}.zip
        asset_content_type: application/zip